2 + 3
"Hello " + "World!"
[1,2,3,4] + [5,6,7,8]
[false & false, true & false, false & true, true & true]
def var = 42
set var = 69
[def var = 42, var, set var = 69, var]
@head([1,2,3])  
@tail([1,2,3])  
@prepend( 4, [1,2,3])  
@print( "Hello" )
@print( @head( [1, 2, 3, 4] ) )
@print( @tail( [1, 2, 3, 4] ) )
@prepend( 0, [1, 2, 3, 4] )
def myprint = lambda ( a ) {
  @print( a )
}

@myprint( "Hello" )
def counter =
  let count = 0 {  
    lambda () { 
      set count = count + 1
      count
    }
  }

@print( @counter() )
@print( @counter() )
@print( @counter() )
@print( @counter() )
@print( @counter() )
"Bye"
def a =  42
def a = 42
def a = 69
12 / 4
false
guard ex {
 "Hello"
} catch ex = "World" {
 "Bye"
} catch ex = "Goodbye" {
 "Adieu"
} catch {
 "Arivaderci"
}
guard ex {
   "Hello"
}
catch ex = "World" { "Bye" }
catch ex = "Goodbye" { "Adieu" }
catch { "Arivaderci" }
guard ex {
   "Hello"
   raise "World"
}
catch ex = "World" { "Bye" }
catch ex = "Goodbye" { "Adieu" }
catch { "Arivaderci" }
guard ex {
   "Hello"
   raise "Goodbye"
}
catch ex = "World" { "Bye" }
catch ex = "Goodbye" { "Adieu" }
catch { "Arivaderci" }
guard ex {
   "Hello"
   raise "WTF"
}
catch ex = "World" { "Bye" }
catch ex = "Goodbye" { "Adieu" }
catch { "Arivaderci" }
guard ex {
  guard ex {
    "Level 2"
    raise "World"
  }
  catch ex = "World" { "Once More" }
}
catch ex = "World" { "Bye" }
catch ex = "Goodbye" { "Adieu" }
catch { "Arivaderci" }
guard ex {
  guard ex {
    "Level 2"
    raise "World"
  }
  catch ex = "Goodbye" { "Once More" }
}
catch ex = "World" { "Bye" }
catch ex = "Goodbye" { "Adieu" }
catch { "Arivaderci" }
if 1 < 2 {
  "Hello World?"
} else {
  "Goodbye World?"
}

if 1 > 2 {
  "Hello World?"
} else {
  "Goodbye World?"
}

if 1 > 2 {
  "Hello World?"
}
elseif 2 < 3 {
  "Ciao World?"
}
else {
  "Goodbye World?"
}

if 1 > 2 {
  "Hello World?"
}
elseif 2 > 3 {
  "Ciao World?"
}
else {
  "Goodbye World?"
}
42
0
def add = lambda ( a, b ) { a + b }
lambda ( a, b ) { a + b }
def a = 0
let a = 10, b =20 { a + b }
def a = 0
let a = 10, b = a + 20 { a + b a * b }
def a = 0
letrec a = 10, b = a + 20 { 
    a + b 
    a * b 
}
[ 1, 2, 3, 4 ]
[]
3 * 4
nil
1 + 2 * 3 - 4 / 2
2 > 1 + 2 * 3 - 4 / 2
2 > 1 + 2 * 3 - 4 / 2 | 6 > 1 + 2 * 3 - 4 / 2
1 - 1 + 2
false & false | true
true | false & false
( true | false ) & false
[false | false, true | false, false | true, true | true]
( 42 )
def a = 2
def b = 4
[a < b, a > b, a = b, a # b]
def a = 4
def b = 2
[a < b, a > b, a = b, a # b]
def a = 2
def b = 4
[a < b, a > b, a = b, a # b]
def a = "Alice"
def b = "Bob"
[a < b, a > b, a = b, a # b]
def a = "Bob"
def b = "Alice"
[a < b, a > b, a = b, a # b]
def a = "Alice"
def b = "Alice"
[a < b, a > b, a = b, a # b]
def a = [1, 2, 3]
def b = [1, 2, 3]
[a < b, a > b, a = b, a # b]
def a = [1, 2, 3]
def b = [3, 2, 1]
[a < b, a > b, a = b, a # b]
def a = [3, 2, 1]
def b = [1, 2, 3]
[a < b, a > b, a = b, a # b]
"Hello World!"
""
4 - 1
1 - 4
Alice
true
-42
!true
